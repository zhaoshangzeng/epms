<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.zengzhaoshang.dao.EEmployMapper">
  <cache/>
  <resultMap id="BaseResultMap" type="cn.zengzhaoshang.entity.EEmploy">
    <id column="id" jdbcType="CHAR" property="id" />
    <result column="dept_id" jdbcType="CHAR" property="deptId" />
    <result column="job_name" jdbcType="VARCHAR" property="jobName" />
    <result column="emp_num" jdbcType="SMALLINT" property="empNum" />
    <result column="job_pay" jdbcType="VARCHAR" property="jobPay" />
    <result column="emp_date" jdbcType="DATE" property="empDate" />
    <result column="is_now_emp" jdbcType="TINYINT" property="isNowEmp" />
    <result column="is_finish" jdbcType="TINYINT" property="isFinish" />
    <result column="version" jdbcType="INTEGER" property="version" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="cn.zengzhaoshang.entity.EEmploy">
    <result column="job_require" jdbcType="LONGVARCHAR" property="jobRequire" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    `id`, `dept_id`, `job_name`, `emp_num`, `job_pay`, `emp_date`, `is_now_emp`, `is_finish`, 
    `version`
  </sql>
  <sql id="Blob_Column_List">
    `job_require`
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="cn.zengzhaoshang.entity.EEmployExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from e_employ
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="cn.zengzhaoshang.entity.EEmployExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from e_employ
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from e_employ
    where `id` = #{id,jdbcType=CHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    delete from e_employ
    where `id` = #{id,jdbcType=CHAR}
  </delete>
  <delete id="deleteByExample" parameterType="cn.zengzhaoshang.entity.EEmployExample">
    delete from e_employ
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="cn.zengzhaoshang.entity.EEmploy">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.String">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into e_employ (`dept_id`, `job_name`, `emp_num`, 
      `job_pay`, `emp_date`, `is_now_emp`, 
      `is_finish`, `version`, `job_require`
      )
    values (#{deptId,jdbcType=CHAR}, #{jobName,jdbcType=VARCHAR}, #{empNum,jdbcType=SMALLINT}, 
      #{jobPay,jdbcType=VARCHAR}, #{empDate,jdbcType=DATE}, #{isNowEmp,jdbcType=TINYINT}, 
      #{isFinish,jdbcType=TINYINT}, #{version,jdbcType=INTEGER}, #{jobRequire,jdbcType=LONGVARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="cn.zengzhaoshang.entity.EEmploy">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.String">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into e_employ
    <trim prefix="(" suffix=")" suffixOverrides=",">
      `id`,
      <if test="deptId != null">
        `dept_id`,
      </if>
      <if test="jobName != null">
        `job_name`,
      </if>
      <if test="empNum != null">
        `emp_num`,
      </if>
      <if test="jobPay != null">
        `job_pay`,
      </if>
      <if test="empDate != null">
        `emp_date`,
      </if>
      <if test="isNowEmp != null">
        `is_now_emp`,
      </if>
      <if test="isFinish != null">
        `is_finish`,
      </if>
      <if test="version != null">
        `version`,
      </if>
      <if test="jobRequire != null">
        `job_require`,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      #{id,jdbcType=VARCHAR},
      <if test="deptId != null">
        #{deptId,jdbcType=CHAR},
      </if>
      <if test="jobName != null">
        #{jobName,jdbcType=VARCHAR},
      </if>
      <if test="empNum != null">
        #{empNum,jdbcType=SMALLINT},
      </if>
      <if test="jobPay != null">
        #{jobPay,jdbcType=VARCHAR},
      </if>
      <if test="empDate != null">
        #{empDate,jdbcType=DATE},
      </if>
      <if test="isNowEmp != null">
        #{isNowEmp,jdbcType=TINYINT},
      </if>
      <if test="isFinish != null">
        #{isFinish,jdbcType=TINYINT},
      </if>
      <if test="version != null">
        #{version,jdbcType=INTEGER},
      </if>
      <if test="jobRequire != null">
        #{jobRequire,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="cn.zengzhaoshang.entity.EEmployExample" resultType="java.lang.Long">
    select count(*) from e_employ
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update e_employ
    <set>
      <if test="record.id != null">
        `id` = #{record.id,jdbcType=CHAR},
      </if>
      <if test="record.deptId != null">
        `dept_id` = #{record.deptId,jdbcType=CHAR},
      </if>
      <if test="record.jobName != null">
        `job_name` = #{record.jobName,jdbcType=VARCHAR},
      </if>
      <if test="record.empNum != null">
        `emp_num` = #{record.empNum,jdbcType=SMALLINT},
      </if>
      <if test="record.jobPay != null">
        `job_pay` = #{record.jobPay,jdbcType=VARCHAR},
      </if>
      <if test="record.empDate != null">
        `emp_date` = #{record.empDate,jdbcType=DATE},
      </if>
      <if test="record.isNowEmp != null">
        `is_now_emp` = #{record.isNowEmp,jdbcType=TINYINT},
      </if>
      <if test="record.isFinish != null">
        `is_finish` = #{record.isFinish,jdbcType=TINYINT},
      </if>
      <if test="record.version != null">
        `version` = #{record.version,jdbcType=INTEGER},
      </if>
      <if test="record.jobRequire != null">
        `job_require` = #{record.jobRequire,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update e_employ
    set `id` = #{record.id,jdbcType=CHAR},
      `dept_id` = #{record.deptId,jdbcType=CHAR},
      `job_name` = #{record.jobName,jdbcType=VARCHAR},
      `emp_num` = #{record.empNum,jdbcType=SMALLINT},
      `job_pay` = #{record.jobPay,jdbcType=VARCHAR},
      `emp_date` = #{record.empDate,jdbcType=DATE},
      `is_now_emp` = #{record.isNowEmp,jdbcType=TINYINT},
      `is_finish` = #{record.isFinish,jdbcType=TINYINT},
      `version` = #{record.version,jdbcType=INTEGER},
      `job_require` = #{record.jobRequire,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update e_employ
    set `id` = #{record.id,jdbcType=CHAR},
      `dept_id` = #{record.deptId,jdbcType=CHAR},
      `job_name` = #{record.jobName,jdbcType=VARCHAR},
      `emp_num` = #{record.empNum,jdbcType=SMALLINT},
      `job_pay` = #{record.jobPay,jdbcType=VARCHAR},
      `emp_date` = #{record.empDate,jdbcType=DATE},
      `is_now_emp` = #{record.isNowEmp,jdbcType=TINYINT},
      `is_finish` = #{record.isFinish,jdbcType=TINYINT},
      `version` = #{record.version,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="cn.zengzhaoshang.entity.EEmploy">
    update e_employ set
      <if test="deptId != null">
        `dept_id` = #{deptId,jdbcType=CHAR},
      </if>
      <if test="jobName != null">
        `job_name` = #{jobName,jdbcType=VARCHAR},
      </if>
      <if test="empNum != null">
        `emp_num` = #{empNum,jdbcType=SMALLINT},
      </if>
      <if test="jobPay != null">
        `job_pay` = #{jobPay,jdbcType=VARCHAR},
      </if>
      <if test="empDate != null">
        `emp_date` = #{empDate,jdbcType=DATE},
      </if>
      <if test="isNowEmp != null">
        `is_now_emp` = #{isNowEmp,jdbcType=TINYINT},
      </if>
      <if test="isFinish != null">
        `is_finish` = #{isFinish,jdbcType=TINYINT},
      </if>
      <if test="jobRequire != null">
        `job_require` = #{jobRequire,jdbcType=LONGVARCHAR},
      </if>
     `version` = `version` + 1
	  where `id` = #{id,jdbcType=CHAR} AND `version` = #{version,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="cn.zengzhaoshang.entity.EEmploy">
    update e_employ
    set `dept_id` = #{deptId,jdbcType=CHAR},
      `job_name` = #{jobName,jdbcType=VARCHAR},
      `emp_num` = #{empNum,jdbcType=SMALLINT},
      `job_pay` = #{jobPay,jdbcType=VARCHAR},
      `emp_date` = #{empDate,jdbcType=DATE},
      `is_now_emp` = #{isNowEmp,jdbcType=TINYINT},
      `is_finish` = #{isFinish,jdbcType=TINYINT},
      `version` = #{version,jdbcType=INTEGER},
      `job_require` = #{jobRequire,jdbcType=LONGVARCHAR}
    where `id` = #{id,jdbcType=CHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="cn.zengzhaoshang.entity.EEmploy">
    update e_employ
    set `dept_id` = #{deptId,jdbcType=CHAR},
      `job_name` = #{jobName,jdbcType=VARCHAR},
      `emp_num` = #{empNum,jdbcType=SMALLINT},
      `job_pay` = #{jobPay,jdbcType=VARCHAR},
      `emp_date` = #{empDate,jdbcType=DATE},
      `is_now_emp` = #{isNowEmp,jdbcType=TINYINT},
      `is_finish` = #{isFinish,jdbcType=TINYINT},
      `version` = #{version,jdbcType=INTEGER}
    where `id` = #{id,jdbcType=CHAR}
  </update>
</mapper>