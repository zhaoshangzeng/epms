<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.zengzhaoshang.dao.ERuleMapper">
  <cache/>
  <resultMap id="BaseResultMap" type="cn.zengzhaoshang.entity.ERule">
    <id column="id" jdbcType="TINYINT" property="id" />
    <result column="max_late" jdbcType="TINYINT" property="maxLate" />
    <result column="max_early" jdbcType="TINYINT" property="maxEarly" />
    <result column="max_absence" jdbcType="TINYINT" property="maxAbsence" />
    <result column="max_leave" jdbcType="TINYINT" property="maxLeave" />
    <result column="version" jdbcType="INTEGER" property="version" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    `id`, `max_late`, `max_early`, `max_absence`, `max_leave`, `version`
  </sql>
  <select id="selectByExample" parameterType="cn.zengzhaoshang.entity.ERuleExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from e_rule
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Byte" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from e_rule
    where `id` = #{id,jdbcType=TINYINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Byte">
    delete from e_rule
    where `id` = #{id,jdbcType=TINYINT}
  </delete>
  <delete id="deleteByExample" parameterType="cn.zengzhaoshang.entity.ERuleExample">
    delete from e_rule
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="cn.zengzhaoshang.entity.ERule">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Byte">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into e_rule (`max_late`, `max_early`, `max_absence`, 
      `max_leave`, `version`)
    values (#{maxLate,jdbcType=TINYINT}, #{maxEarly,jdbcType=TINYINT}, #{maxAbsence,jdbcType=TINYINT}, 
      #{maxLeave,jdbcType=TINYINT}, #{version,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="cn.zengzhaoshang.entity.ERule">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Byte">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into e_rule
    <trim prefix="(" suffix=")" suffixOverrides=",">
      `id`,
      <if test="maxLate != null">
        `max_late`,
      </if>
      <if test="maxEarly != null">
        `max_early`,
      </if>
      <if test="maxAbsence != null">
        `max_absence`,
      </if>
      <if test="maxLeave != null">
        `max_leave`,
      </if>
      <if test="version != null">
        `version`,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      #{id,jdbcType=VARCHAR},
      <if test="maxLate != null">
        #{maxLate,jdbcType=TINYINT},
      </if>
      <if test="maxEarly != null">
        #{maxEarly,jdbcType=TINYINT},
      </if>
      <if test="maxAbsence != null">
        #{maxAbsence,jdbcType=TINYINT},
      </if>
      <if test="maxLeave != null">
        #{maxLeave,jdbcType=TINYINT},
      </if>
      <if test="version != null">
        #{version,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="cn.zengzhaoshang.entity.ERuleExample" resultType="java.lang.Long">
    select count(*) from e_rule
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update e_rule
    <set>
      <if test="record.id != null">
        `id` = #{record.id,jdbcType=TINYINT},
      </if>
      <if test="record.maxLate != null">
        `max_late` = #{record.maxLate,jdbcType=TINYINT},
      </if>
      <if test="record.maxEarly != null">
        `max_early` = #{record.maxEarly,jdbcType=TINYINT},
      </if>
      <if test="record.maxAbsence != null">
        `max_absence` = #{record.maxAbsence,jdbcType=TINYINT},
      </if>
      <if test="record.maxLeave != null">
        `max_leave` = #{record.maxLeave,jdbcType=TINYINT},
      </if>
      <if test="record.version != null">
        `version` = #{record.version,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update e_rule
    set `id` = #{record.id,jdbcType=TINYINT},
      `max_late` = #{record.maxLate,jdbcType=TINYINT},
      `max_early` = #{record.maxEarly,jdbcType=TINYINT},
      `max_absence` = #{record.maxAbsence,jdbcType=TINYINT},
      `max_leave` = #{record.maxLeave,jdbcType=TINYINT},
      `version` = #{record.version,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="cn.zengzhaoshang.entity.ERule">
    update e_rule set
      <if test="maxLate != null">
        `max_late` = #{maxLate,jdbcType=TINYINT},
      </if>
      <if test="maxEarly != null">
        `max_early` = #{maxEarly,jdbcType=TINYINT},
      </if>
      <if test="maxAbsence != null">
        `max_absence` = #{maxAbsence,jdbcType=TINYINT},
      </if>
      <if test="maxLeave != null">
        `max_leave` = #{maxLeave,jdbcType=TINYINT},
      </if>
      `version` = `version` + 1
	  where `id` = #{id,jdbcType=CHAR} AND `version` = #{version,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="cn.zengzhaoshang.entity.ERule">
    update e_rule
    set `max_late` = #{maxLate,jdbcType=TINYINT},
      `max_early` = #{maxEarly,jdbcType=TINYINT},
      `max_absence` = #{maxAbsence,jdbcType=TINYINT},
      `max_leave` = #{maxLeave,jdbcType=TINYINT},
      `version` = #{version,jdbcType=INTEGER}
    where `id` = #{id,jdbcType=TINYINT}
  </update>
</mapper>